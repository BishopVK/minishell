DOCUMENTACIÓN

Hay tres tipos de tokens: palabras reservadas, palabras y operadores.Los operadores son | y >. El resto son palabras comunes. 
Las variables son cadenas. Una empieza con dólar se expande y reemplaza con el valor. La redirección permite abrir y cerrar archivos.
Pipe es una lista lineal de comandos donde la salida de un comando es la entrada del siguiente.
Permite que los flujos de entrada, salida y error se redirijan a otro archivo o proceso cuando se invoca el comando.
La estructura para pasar información de la etapa a la siguiente y operar en unidades de datos en cada etapa de procesamiento es WORD_DESC:
typedef struct word_desc { 
  char *word; /* Cadena terminada en cero. */ 
  int flags; /* Banderas asociadas con esta palabra. */ 
} WORD_DESC;
Los caracteres se dividen en líneas y pasan al analizador para transformarse en comandos. 
Readline registra el búfer de caracteres en pantalla, el contenido visible y los caracteres reales.

ANÁLISIS LÉXICO
Interpreta los caracteres entre comillas y evita que se reconozcan como palabras reservadas o metacaracteres. 
Toma la entrada de readline, separa los caracteres en palabras y aplica significado al resultado. 
Las palabras son caracteres separados por metacaracteres: espacios, tabulaciones, ';' y &.
Divide los tokens en metacaracteres, los identifica por el contexto, pasan al analizador y se ensamblan en declaraciones y comandos.
Las palabras son reservadas, identificadores, parte de una declaración de asignación u otra palabra, y la siguiente es un comando válido.
Las comillas interpretan diferente el texto. Las simples, impiden la interpretación de todos los caracteres. 
Las dobles impiden, pero permiten expansiones (tratan las barras invertidas diferente). 

ANÁLISIS SINTÁCTICO
El léxico clasifica por el token: palabra reservada, palabra, declaración de asignación. El sintáctico analiza según el contexto gramatical.
Indica si procesa una cadena de varias líneas, una declaración de caso, un patrón de shell extendido o código.
Al expandir se usa para buscar el final de la construcción. Devuelve una estructura que representa un comando y expande si es necesario. 
Esta está compuesto por objetos de comandos y listas de palabras. Las listas de palabras pasan por transformaciones, según el contexto.

EXPANSIONES DE PALABRAS
Después del análisis y antes de la ejecución las palabras y variables se expanden.
${parameter:-word}se expandirá a parameter si está configurada y si word no está configurada a la cadena vacía.
Expansión de llaves, que convierte:   pre{uno,dos,tres}post
en:   preonepost pretwopost prethreepost
La sustitución de comandos lo ejecuta, recopila el resultado y lo usa como valor de expansión. Ejecuta adjunto de inmediato y espera su fin.
Bash usa la sustitución de proceso, combinación de sustitución de comandos y pipelines, ejecuta un comando en segundo plano y no espera.
Abre un pipe al comando para leer o escribir y lo expone como nombre de archivo, que es el resultado de la expansión.
La expansión aritmética, $((expression)) hace que expression se evalúe según las reglas de C. 
En la expansión de variables se diferencian las comillas simples que inhiben todas las expansiones y las dobles que permiten algunas.
Las expansiones y la sustitución de comandos, aritmética y procesos tienen lugar pero la expansión con llaves y tildes no.
Una vez divididos los resultados, interpreta las expansiones y las compara con nombres de archivos, incluidas rutas de directorio principal.

IMPLEMENTACIÓN
Las expansiones son una pequeña tubería. Cada etapa toma una palabra, la transforma, la pasa a la siguiente etapa de expansión.
Una vez realizadas las expansiones se ejecuta el comando. Las palabras del analizador se expanden individualmente.
Los indicadores se usan para codificar información para la expansión de palabras y pasar información de la etapa a la siguiente.
Se usa un indicador para inhibir la división de palabras en la etapa de expansión, ejecución de comandos y el código de expansión. 
Las palabras expandidas se descomponen en nombre de comando y argumentos, pasan como archivo a leer y ejecutar, y las restantes como argv.
La entrada es la estructura de comandos del analizador y un conjunto de palabras expandidas.

REDIRECCIÓN
El analizador sintáctico crea el objeto de redirección, interpreta el indicador y asigna el fd a la variable. 
Su efecto no persiste al finalizar el comando. Realiza un seguimiento para deshacer los efectos, si no, cambiaría la salida estándar.
Deshace cerrando un fd o guardando el duplicado y restaurándolo con dup2. Si son múltiples se implementan como listas simples de objetos.
Las usadas para deshacer se guardan en otra lista que se procesa al completar un comando. 

BUILT-INS
Se ejecutan sin crear nuevos procesos. Mantienen o modifican shell (cd). Toman una lista de palabras como argumentos.
Las palabras están expandidas. Las instrucciones incorporadas las tratan como nombres de comandos y argumentos. 
Usan reglas de expansión salvo que acepten como argumentos declaraciones de asignación (export) que usan las de asignaciones de variables.
El flag de la WORD_DESC estructura se usa para pasar información entre una etapa de la tubería interna del shell y otra.

EJECUCIÓN DE COMANDOS SIMPLES
Incluye asignaciones de variables(var=value). Las instrucciones de asignación preceden a un comando o son independientes.
Si preceden a un comando, las variables pasan al comando ejecutado en su entorno.
Si es integrado o una función de shell persisten solo al ejecutarse. Si no sigue un comando las instrucciones de asignación modifican shell.
Si un comando no es una función de shell o una instrucción incorporada, busca en la lista de directorios PATH un ejecutable con ese nombre.
Al encontrarse se guarda el nombre del comando y la ruta completa. Los nombres de comandos que vienen con ruta se ejecutan directamente.
Si no lo encuentra se ejecuta una función con el nombre del comando y los argumentos como argumentos de la función.

CONTROL DE TRABAJOS
Es la capacidad de mover procesos entre planos, y suspender y reanudar su ejecución.
Puede ejecutar comandos en primer plano, el comando termina y recopila su estado de salida, o en segundo donde lee el siguiente comando.
Un comando se ejecuta por uno o más procesos. Una pipe usa un proceso para cada uno de sus elementos.
Es una lista enlazada de las estructuras de proceso. El grupo de procesos une procesos separados en un solo trabajo.
Usan estructuras de datos simples en el control de trabajos. Para representar un proceso secundario tienen el ID, estado y el de retorno.
Un trabajo tiene la lista de procesos, el estado del trabajo (en ejecución, suspendido, salido) y el ID del grupo de procesos del trabajo.
La lista de procesos tiene un solo proceso; las tuberías dan más de un proceso asociado con un trabajo.
Cada trabajo tiene un ID de grupo de procesos único. El ID del proceso que es el del grupo de procesos del trabajo es el líder.
Los trabajos se ponen en una matriz. El estado del trabajo y de salida se unen con el estado y los de salida de los procesos constituyentes.

BONUS
Los comandos que se ejecutan en un shell tienen un código de salida, que se almacena en la variable $?
si $? es 0 el comando terminó bien. si $? es > 0 el comando terminó mal

$ ls /bin/ls -> /bin/ls
$ echo $? -> 0
$ ls /bin/ll -> ls: /bin/ll: Non hai tal ficheiro ou directorio
$ echo $? -> 1

Se chequea la salida de dos comandos mediante operadores && (AND) y || (OR). Actúan en cortocircuito:
comando1 && comando2 -> comando2 sólo se ejecuta si comando1 acaba bien
comando1 || comando2 -> comando2 sólo se ejecuta si comando1 falla
comandos true y false: devuelven 0 y 1, respectivamente

$ ls /bin/ls && ls /bin/ll -> /bin/ls     ls: /bin/ll: Non hai tal ficheiro ou directorio
$ echo $? -> 1
$ ls /bin/ll && ls /bin/ls -> ls: /bin/ll: Non hai tal ficheiro ou directorio
$ echo $? -> 1

$ ls /bin/ls || ls /bin/ll -> /bin/ls
$ echo $? -> 0
$ ls /bin/ll || ls /bin/ls -> ls: /bin/ll: Non hai tal ficheiro ou directorio   /bin/ls
$ echo $? -> 0